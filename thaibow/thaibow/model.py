# generated by datamodel-codegen:
#   filename:  schema2.json
#   timestamp: 2022-09-14T02:09:24+00:00

from __future__ import annotations

from typing import List, Optional, Literal

from pydantic import BaseModel, validator, Extra

part_of_speech = List[Literal['Noun', 'Verb', 'StativeVerb', 'Adjective', 'Adverb',
                              'IndefinitePronoun', 'Pronoun', 'ComparativeAdjective', 'PersonalPronoun', 'Phrase', 'Interjection', 'Preposition', 'Conjunction', 'None', 'Classifier', 'Particle', 'RelativePronoun', 'DemonstrativeAdjective', 'AdverbAuxiliary', 'Interrogative', 'NEG', 'Quantifier', 'Repeater', 'Determiner', 'Prefix', 'PreposedAdjective', 'TopicMarker', 'SecondaryVerb', 'PrecedingIntensifier', 'Boundelement']]

commoness = Literal['Very commonly', 'Commonly',
                    'Sometimes', 'Rarely', 'Very rarely']

etymology = Literal["", "Pali/Sanskrit", "English", "Thai", "Khmer", "Chinese"]


class Meaning(BaseModel):
    meaning: str

    class Config:
        extra = Extra.forbid


class Word(BaseModel):
    isThai: bool
    meanings: List[Meaning]
    phonetic: str
    word: str

    class Config:
        extra = Extra.forbid


class OuterExampleSentence(BaseModel):
    engSentence: str
    id: int
    phonetic: str
    thaiSentence: str
    thaiSentenceSpaced: str
    words: List[Word]

    class Config:
        extra = Extra.forbid


class InnerExampleSentence(BaseModel):
    engSentence: str
    id: int
    thaiSentence: str
    thaiSentenceSpaced: str

    class Config:
        extra = Extra.forbid


class Component(BaseModel):
    childId: int
    corpusScore: int
    displayOrder: int
    etymology: etymology
    explanation: str | None
    hasSoundFile: bool
    id: int
    legacyWordId: int
    meaning: str
    parentId: int
    partOfSpeech: part_of_speech
    t2e: str
    usage: str
    verified: str | None
    word: str

    @validator('partOfSpeech', pre=True)
    def pre_process_pos(cls, v: str):
        if " ; " in v:
            pos_list = v.split(" ; ")
            return pos_list
        return [v]

    class Config:
        extra = Extra.forbid


class EngTranslationWord(BaseModel):
    isEngDictionaryWord: bool
    text: str
    word: str

    class Config:
        extra = Extra.forbid


class Example(BaseModel):
    childId: int
    corpusScore: int
    displayOrder: int
    etymology: etymology
    explanation: str | None
    hasSoundFile: bool
    id: int
    legacyWordId: int
    meaning: str
    parentId: int
    partOfSpeech: part_of_speech
    t2e: str
    usage: str
    verified: str | None
    word: str

    @validator('partOfSpeech', pre=True)
    def pre_process_pos(cls, v: str):
        if " ; " in v:
            pos_list = v.split(" ; ")
            return pos_list
        return [v]

    class Config:
        extra = Extra.forbid


class ComplexMeaning(BaseModel):
    components: List[Component]
    displayOrder: int
    engTranslationWords: List[EngTranslationWord]
    etymology: etymology
    examples: List[Example]
    explanation: str | None
    id: int
    isUncommon: bool
    meaning: str
    partOfSpeech: part_of_speech
    usage: str
    word: str

    @validator('partOfSpeech', pre=True)
    def pre_process_pos(cls, v: str):
        if " ; " in v:
            pos_list = v.split(" ; ")
            return pos_list
        return [v]

    class Config:
        extra = Extra.forbid


class FirestoreWord(BaseModel):
    corpusScore: int
    exampleSentences: List[InnerExampleSentence]
    meanings: List[ComplexMeaning]
    t2e: str
    verified: str | None
    word: str
    hasSoundFile: bool
    legacyWordId: int

    class Config:
        extra = Extra.forbid


class Model(BaseModel):
    commonessText: commoness
    exampleSentences: List[OuterExampleSentence]
    firestoreWord: FirestoreWord
    greenBarCount: int
    pageUrl: str
    type: Literal['thai-word']

    class Config:
        extra = Extra.forbid
